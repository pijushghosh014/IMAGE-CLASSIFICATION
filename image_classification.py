# -*- coding: utf-8 -*-
"""IMAGE CLASSIFICATION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kyey9Lk6Cko-FWJXa_NTBr6-tem7-zI5
"""

#IMPORT LIBRARIES
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.utils import to_categorical
from tensorflow.keras import layers
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#LOAD THE DATA
from keras.datasets import cifar10
(x_train,y_train),(x_test,y_test)= cifar10.load_data()

#LOOK AT THE DATA TYPE OF THE VARIABLE
print (type(x_train))
print (type(y_train))
print (type(x_test))
print (type(y_test))

#GET THE SHAPE OF THE ARRAYS
print("x_train shape:", x_train.shape)
print("y_train shape:", y_train.shape)
print("x_test shape:", x_test.shape)
print("y_test shape:", y_test.shape)

#TAKE A LOOK OF FIRST IMAGE AS AN ARRAY
index = 10
x_train[index]

#SHOW THE IMAGE AS PICTURE
img= plt.imshow(x_train[index])

#GET THE IMAGE LABEL AND CLASSIFICATION
print('the image lable is:', y_train[index])
classification = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']
print('the image class is:',classification[y_train[index][0]])

#CONVERT THE LABELS INTO THE 10 INPUTS NEURAL NETWORK
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)
print(y_train_one_hot)
print(y_test_one_hot)

#PRINT THE NEW LABEL OF THE IMAGE/PICTURE ABOVE
print('the new label of the image/pictue is:', y_train_one_hot[index])

#NORMALIZE THE PIXELS TO BE VALUES BETWEEN 0 AND 1
x_train = x_train/255
x_test = x_test/255
x_train[index]
x_test[index]

#CREATE THE MODELS ARCHITECTURE
model = Sequential()

#ADD THE FIRST LAYER
model.add(Conv2D(32,(5,5), activation='relu', input_shape=(32,32,3)))

#ADD A POOLING LAYER
model.add(MaxPooling2D(pool_size=(2,2)))

#ADD ANOTHER CONVOTUTION LAYER
model.add(Conv2D(32,(5,5), activation='relu'))

#ADD ANOTHER POOLING LAYER
model.add(MaxPooling2D(pool_size=(2,2)))

#ADD FLATTENING LAYER
model.add(Flatten())

#ADD A LAYER OF 1000 NEURONS
model.add(Dense(1000, activation='relu'))

#ADD A DROPOUT LAYER
model.add(Dropout(0.5))

#ADD A LAYER OF 500 NEURONS
model.add(Dense(500, activation='relu'))

#ADD A DROPOUT LAYER
model.add(Dropout(0.5))

#ADD A LAYER OF 250 NEURONS
model.add(Dense(250, activation='relu'))

#ADD A LAYER OF 10 NEURONS
model.add(Dense(10, activation='softmax'))

#COMPILE THE MODEL
model.compile(loss = 'categorical_crossentropy', optimizer="adam", metrics=['accuracy'])

#TRAIN THE MODEL
hist = model.fit(x_train, y_train_one_hot, batch_size=256, epochs= 10, validation_split=0.2)

#EVALUATE THE MODEL USING THE TEST DATA SET
model.evaluate(x_test, y_test_one_hot)[1]

#VISUALIZE THE MODEL ACCURACY
plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc='upper left')
plt.show()

#VISUALIZE THE LOSS OF THE MODEL
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc='upper right')
plt.show()

# TEST THE MODEL WITH AN EXAMPLE
from google.colab import files
uploaded = files.upload()

#SHOW THE IMAGE/PICTURE
new_image = plt.imread('truck_1.jpg')
img = plt.imshow(new_image)

#RESIZE THE IMAGE/PICTURE
from skimage.transform import resize
resized_image = resize(new_image,(32,32,3))
img = plt.imshow(resized_image)

# GET THE MODEL PREDICTIONS
predictions = model.predict(np.array([resized_image]))
# SHOW THE PREDICTIONS
predictions

#SORT THE PREDICTIONS FROM LEAST TO GREATEST
list_index = [0,1,2,3,4,5,6,7,8,9]
x = predictions

for i in range (10):
  for j in range (10):
    if x[0][list_index[i]]>x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i]= list_index[j]
      list_index[j]= temp

#SHOW THE SORTED LABELS IN ORDER
print(list_index)

#PRINT THE FIRST 5 PREDICTIONS
for i in range (5):
  print(classification[list_index[i]],":", round(predictions[0][list_index[i]]*100,2),"%")